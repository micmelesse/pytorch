test_batch_istft_cpu (__main__.TestFFTCPU) ... /root/pytorch/torch/functional.py:655: UserWarning: istft will require a complex-valued input tensor in a future PyTorch release. Matching the output from stft with return_complex=True.  (Triggered internally at  /root/pytorch/aten/src/ATen/native/SpectralOps.cpp:787.)
  normalized, onesided, length, return_complex)
ok
test_complex_istft_real_equiv_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_complex_stft_definition_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_complex_stft_onesided_cpu (__main__.TestFFTCPU) ... ok
test_complex_stft_real_equiv_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_complex_stft_roundtrip_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_complex_stft_roundtrip_cpu_float64 (__main__.TestFFTCPU) ... ok
test_cufft_plan_cache_cpu_float64 (__main__.TestFFTCPU) ... skipped 'Only runs on cuda'
test_empty_fft_fft_fft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_fftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_hfft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_hfft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_hfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_hfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ifftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ihfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_ihfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_irfftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_rfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_rfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_rfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_empty_fft_fft_rfftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fft2_fftn_equivalence_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fft2_fftn_equivalence_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fft2_invalid_cpu (__main__.TestFFTCPU) ... ok
test_fft2_numpy_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_fft2_numpy_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_fft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_fft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_fftn_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_fftn_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_hfft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_hfft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ifft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ifft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ifftn_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ifftn_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ihfft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_ihfft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_irfft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_irfft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_irfftn_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_irfftn_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_rfft_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_rfft_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_rfftn_cpu_bfloat16 (__main__.TestFFTCPU) ... ok
test_fft_half_and_bfloat16_errors_fft_rfftn_cpu_float16 (__main__.TestFFTCPU) ... ok
test_fft_ifft_rfft_irfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fft_input_modification_cpu (__main__.TestFFTCPU) ... ok
test_fft_invalid_dtypes_cpu (__main__.TestFFTCPU) ... ok
test_fft_round_trip_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_fft_round_trip_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fft_round_trip_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fft_round_trip_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fft_type_promotion_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_fft_type_promotion_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fft_type_promotion_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fft_type_promotion_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fft_type_promotion_cpu_int8 (__main__.TestFFTCPU) ... ok
test_fftfreq_numpy_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftfreq_numpy_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fftfreq_out_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftfreq_out_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_fftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_fftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_ifftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_ifftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_irfftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_irfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftn_invalid_fft_rfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftn_round_trip_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_fftn_round_trip_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fftn_round_trip_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftn_round_trip_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fftshift_frequencies_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftshift_frequencies_cpu_float64 (__main__.TestFFTCPU) ... ok
test_fftshift_numpy_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_fftshift_numpy_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_fftshift_numpy_cpu_float32 (__main__.TestFFTCPU) ... ok
test_fftshift_numpy_cpu_float64 (__main__.TestFFTCPU) ... ok
test_istft_linearity_cpu_float64 (__main__.TestFFTCPU) ... ok
test_istft_of_sine_cpu_float64 (__main__.TestFFTCPU) ... ok
test_istft_round_trip_simple_cases_cpu_float64 (__main__.TestFFTCPU)
stft -> istft should recover the original signale ... ok
test_istft_round_trip_various_params_cpu_float64 (__main__.TestFFTCPU)
stft -> istft should recover the original signale ... ok
test_istft_throws_cpu (__main__.TestFFTCPU)
istft should throw exception for invalid parameters ... ok
test_reference_1d_fft_fft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_fft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_fft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_fft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_hfft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_hfft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_hfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_hfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ifft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ifft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ifft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ifft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ihfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_ihfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_irfft_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_irfft_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_irfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_irfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_rfft_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_1d_fft_rfft_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_fftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_fftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_fftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_fftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_ifftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_ifftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_ifftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_ifftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_irfftn_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_irfftn_cpu_complex64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_irfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_irfftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_rfftn_cpu_float32 (__main__.TestFFTCPU) ... ok
test_reference_nd_fft_rfftn_cpu_float64 (__main__.TestFFTCPU) ... ok
test_stft_cpu_float64 (__main__.TestFFTCPU) ... /root/pytorch/torch/functional.py:581: UserWarning: stft will soon require the return_complex parameter be given for real inputs, and will further require that return_complex=True in a future PyTorch release. (Triggered internally at  /root/pytorch/aten/src/ATen/native/SpectralOps.cpp:639.)
  normalized, onesided, return_complex)
ok
test_stft_requires_complex_cpu (__main__.TestFFTCPU) ... ok
test_stft_roundtrip_complex_window_cpu_complex128 (__main__.TestFFTCPU) ... ok
test_stft_roundtrip_complex_window_cpu_float64 (__main__.TestFFTCPU) ... ok
test_stft_window_device_cpu (__main__.TestFFTCPU) ... skipped 'Only runs on cuda'
test_batch_istft_cuda (__main__.TestFFTCUDA) ... ok
test_complex_istft_real_equiv_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_complex_stft_definition_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_complex_stft_onesided_cuda (__main__.TestFFTCUDA) ... ok
test_complex_stft_real_equiv_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_complex_stft_roundtrip_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_complex_stft_roundtrip_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_cufft_plan_cache_cuda_float64 (__main__.TestFFTCUDA) ... ERROR
test_empty_fft_fft_fft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fftn_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_fftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_hfft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_hfft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_hfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_hfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifftn_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ifftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ihfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_ihfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfftn_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_irfftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_rfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_rfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_rfftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_empty_fft_fft_rfftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fft2_fftn_equivalence_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fft2_fftn_equivalence_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fft2_invalid_cuda (__main__.TestFFTCUDA) ... ok
test_fft2_numpy_cuda_complex128 (__main__.TestFFTCUDA) ... FAIL
test_fft2_numpy_cuda_float64 (__main__.TestFFTCUDA) ... FAIL
test_fft_half_and_bfloat16_errors_fft_fft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_fft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_fftn_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_fftn_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_hfft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_hfft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ifft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ifft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ifftn_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ifftn_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ihfft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_ihfft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_irfft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_irfft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_irfftn_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_irfftn_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_rfft_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_rfft_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_rfftn_cuda_bfloat16 (__main__.TestFFTCUDA) ... ok
test_fft_half_and_bfloat16_errors_fft_rfftn_cuda_float16 (__main__.TestFFTCUDA) ... ok
test_fft_ifft_rfft_irfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fft_input_modification_cuda (__main__.TestFFTCUDA) ... ok
test_fft_invalid_dtypes_cuda (__main__.TestFFTCUDA) ... ok
test_fft_round_trip_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_fft_round_trip_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fft_round_trip_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fft_round_trip_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fft_type_promotion_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_fft_type_promotion_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fft_type_promotion_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fft_type_promotion_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fft_type_promotion_cuda_int8 (__main__.TestFFTCUDA) ... ok
test_fftfreq_numpy_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftfreq_numpy_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fftfreq_out_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftfreq_out_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_fftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_fftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_ifftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_ifftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_irfftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_irfftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftn_invalid_fft_rfftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftn_round_trip_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_fftn_round_trip_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fftn_round_trip_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftn_round_trip_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fftshift_frequencies_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftshift_frequencies_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_fftshift_numpy_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_fftshift_numpy_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_fftshift_numpy_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_fftshift_numpy_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_istft_linearity_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_istft_of_sine_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_istft_round_trip_simple_cases_cuda_float64 (__main__.TestFFTCUDA)
stft -> istft should recover the original signale ... ok
test_istft_round_trip_various_params_cuda_float64 (__main__.TestFFTCUDA)
stft -> istft should recover the original signale ... ok
test_istft_throws_cuda (__main__.TestFFTCUDA)
istft should throw exception for invalid parameters ... ok
test_reference_1d_fft_fft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_fft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_fft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_fft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_hfft_cuda_complex128 (__main__.TestFFTCUDA) ... FAIL
test_reference_1d_fft_hfft_cuda_complex64 (__main__.TestFFTCUDA) ... FAIL
test_reference_1d_fft_hfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_hfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ifft_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ifft_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ifft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ifft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ihfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_ihfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_irfft_cuda_complex128 (__main__.TestFFTCUDA) ... FAIL
test_reference_1d_fft_irfft_cuda_complex64 (__main__.TestFFTCUDA) ... FAIL
test_reference_1d_fft_irfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_irfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_rfft_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_1d_fft_rfft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_fftn_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_fftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_fftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_fftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_ifftn_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_ifftn_cuda_complex64 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_ifftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_ifftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_irfftn_cuda_complex128 (__main__.TestFFTCUDA) ... FAIL
test_reference_nd_fft_irfftn_cuda_complex64 (__main__.TestFFTCUDA) ... FAIL
test_reference_nd_fft_irfftn_cuda_float32 (__main__.TestFFTCUDA) ... FAIL
test_reference_nd_fft_irfftn_cuda_float64 (__main__.TestFFTCUDA) ... FAIL
test_reference_nd_fft_rfftn_cuda_float32 (__main__.TestFFTCUDA) ... ok
test_reference_nd_fft_rfftn_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_stft_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_stft_requires_complex_cuda (__main__.TestFFTCUDA) ... ok
test_stft_roundtrip_complex_window_cuda_complex128 (__main__.TestFFTCUDA) ... ok
test_stft_roundtrip_complex_window_cuda_float64 (__main__.TestFFTCUDA) ... ok
test_stft_window_device_cuda (__main__.TestFFTCUDA) ... ok

======================================================================
ERROR: test_cufft_plan_cache_cuda_float64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 292, in instantiated_test
    raise rte
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 702, in multi_fn
    return fn(slf, devices, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 678, in only_fn
    return fn(slf, device, *args, **kwargs)
  File "test_spectral_ops.py", line 624, in test_cufft_plan_cache
    with plan_cache_max_size(devices[0], max(1, torch.backends.cuda.cufft_plan_cache.size - 10)):
  File "/root/pytorch/torch/backends/cuda/__init__.py", line 77, in __getattr__
    return getattr(self[torch.cuda.current_device()], name)
  File "/root/pytorch/torch/backends/cuda/__init__.py", line 21, in __get__
    return self.getter(obj.device_index)
RuntimeError: cuFFT with HIP is not supported

======================================================================
FAIL: test_fft2_numpy_cuda_complex128 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 381, in test_fft2_numpy
    self.assertEqual(actual, expected)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 0.17994193103126604 and 0.12541498218954547 gives a difference of 0.054526948841720574, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.016303947684641e-05!

======================================================================
FAIL: test_fft2_numpy_cuda_float64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 381, in test_fft2_numpy
    self.assertEqual(actual, expected)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 0.03477031094722484 and 0.011617331753731194 gives a difference of 0.023152979193493645, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0015102531279851e-05!

======================================================================
FAIL: test_reference_1d_fft_hfft_cuda_complex128 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 137, in test_reference_1d
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing -10.856315716192023 and -11.128634735357883 gives a difference of 0.27231901916585954, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 2.446722515596525e-05!

======================================================================
FAIL: test_reference_1d_fft_hfft_cuda_complex64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 137, in test_reference_1d
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 10.70384407043457 and 10.110131070017815 gives a difference of 0.5937130004167557, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 2.3143170391023162e-05!

======================================================================
FAIL: test_reference_1d_fft_irfft_cuda_complex128 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 137, in test_reference_1d
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing -0.08637086177669498 and -0.08430783890422638 gives a difference of 0.002063022872468595, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0109600190575495e-05!

======================================================================
FAIL: test_reference_1d_fft_irfft_cuda_complex64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 137, in test_reference_1d
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 0.07209402322769165 and 0.07659190204558951 gives a difference of 0.004497878817897857, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0099569472659268e-05!

======================================================================
FAIL: test_reference_nd_fft_irfftn_cuda_complex128 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 278, in test_reference_nd
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 0.17994193103126604 and 0.12541498218954547 gives a difference of 0.054526948841720574, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.016303947684641e-05!

======================================================================
FAIL: test_reference_nd_fft_irfftn_cuda_complex64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 278, in test_reference_nd
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing -0.11365357786417007 and -0.16042265808209777 gives a difference of 0.046769080217927694, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0208549455506727e-05!

======================================================================
FAIL: test_reference_nd_fft_irfftn_cuda_float32 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 278, in test_reference_nd
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing -0.1460142433643341 and -0.12532590003684163 gives a difference of 0.020688343327492476, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0162923670047895e-05!

======================================================================
FAIL: test_reference_nd_fft_irfftn_cuda_float64 (__main__.TestFFTCUDA)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 887, in wrapper
    method(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 287, in instantiated_test
    result = test_fn(self, *args)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 572, in dep_fn
    return fn(slf, device, *args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 265, in test_wrapper
    return test(*args, **kwargs)
  File "/root/pytorch/torch/testing/_internal/common_device_type.py", line 714, in only_fn
    return fn(self, device, *args, **kwargs)
  File "test_spectral_ops.py", line 278, in test_reference_nd
    self.assertEqual(actual, expected, exact_dtype=exact_dtype)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1217, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1095, in assertEqual
    exact_dtype=exact_dtype, exact_device=exact_device)
  File "/root/pytorch/torch/testing/_internal/common_utils.py", line 1228, in assertEqual
    super().assertTrue(result, msg=self._get_assert_msg(msg, debug_msg=debug_msg))
AssertionError: False is not true : Scalars failed to compare as equal! Comparing 0.03477031094722484 and 0.011617331753731194 gives a difference of 0.023152979193493645, but the allowed difference with rtol=1.3e-06 and atol=1e-05 is only 1.0015102531279851e-05!

----------------------------------------------------------------------
Ran 288 tests in 92.882s

FAILED (failures=10, errors=1, skipped=2)
Fail to import hypothesis in common_utils, tests are not derandomized
